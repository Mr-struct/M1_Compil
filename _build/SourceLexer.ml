# 1 "SourceLexer.mll"
 

  (* Contexte *)
  open Lexing
  open SourceParser

  (* Traitement des chaînes de caractères alphabétiques *)
  let id_or_keyword =
    (* Définition d'une table des mots-clés et des lexèmes associés *)
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [	"main", MAIN;
	"var", VAR;
	"integer", INTEGER;
	"boolean", BOOLEAN;
	"if", IF;
	"else", ELSE;
	"while", WHILE;
	"print", PRINT;
	"true", CONST_BOOL(true);
	"false", CONST_BOOL(false);
	"for", FOR;
	"continue", CONTINUE;
	"break", BREAK;
	"elif", ELIF;
	"new", NEW;
	"struct", STRUCT;
	"locked", LOCK;
	"return", RETURN;
      ];
    fun s ->
      (* On cherche la chaîne [s] dans la table. Si on trouve un mot-clé alors
         on renvoie le token associé. *)
      try  Hashtbl.find h s
      (* Et sinon on considère qu'il s'agit d'un identifiant. *)
      with Not_found -> begin (*Printf.printf "%s\n" s;*) IDENT(s) end

  let is_operator =
    (* Définition d'une table des operateurs et des lexèmes associés *)
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [	"+", PLUS;
	"-", MINUS;
	"*", STAR;
	"/", DIV;
	"%", MOD;
	"==", EQUAL;
	"!=", NEQ;
	"<", LT;
	"<=", LE;
	">", GT;
	">=", GE;
	"!", NOT;
	"&&", AND;
	"||", OR;
      ] ;
    fun s ->
      (* On cherche l'opérateur [s] dans la table. Si on trouve alors
         on renvoie le token associé. *)
        Hashtbl.find h s
        

# 65 "SourceLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\236\255\237\255\238\255\002\000\001\000\002\000\003\000\
    \031\000\033\000\239\255\240\255\241\255\242\255\035\000\244\255\
    \245\255\246\255\247\255\248\255\249\255\079\000\072\000\121\000\
    \254\255\255\255\252\255\253\255\243\255\001\000\253\255\254\255\
    \255\255\154\000\252\255\253\255\254\255\118\000\255\255\002\000\
    \254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\019\000\019\000\016\000\016\000\
    \016\000\019\000\255\255\255\255\255\255\255\255\019\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\004\000\016\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
    \000\000\035\000\000\000\000\000\000\000\255\255\000\000\040\000\
    \000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\024\000\032\000\041\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\008\000\000\000\002\000\000\000\010\000\005\000\010\000\
    \018\000\017\000\010\000\010\000\012\000\010\000\011\000\023\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\014\000\013\000\007\000\009\000\006\000\010\000\
    \010\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\016\000\010\000\015\000\010\000\022\000\
    \028\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\020\000\004\000\019\000\010\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\026\000\036\000\038\000\000\000\022\000\
    \027\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\000\000\037\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\030\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\034\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\029\000\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\000\000\009\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\023\000\033\000\037\000\255\255\022\000\
    \023\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\255\255\033\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\029\000\039\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\033\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 75 "SourceLexer.mll"
      ( token lexbuf )
# 215 "SourceLexer.ml"

  | 1 ->
# 78 "SourceLexer.mll"
      ( new_line lexbuf; token lexbuf )
# 220 "SourceLexer.ml"

  | 2 ->
# 81 "SourceLexer.mll"
      ( comm lexbuf )
# 225 "SourceLexer.ml"

  | 3 ->
# 84 "SourceLexer.mll"
      ( comm_long lexbuf )
# 230 "SourceLexer.ml"

  | 4 ->
# 88 "SourceLexer.mll"
      ( id_or_keyword (lexeme lexbuf) )
# 235 "SourceLexer.ml"

  | 5 ->
# 91 "SourceLexer.mll"
      ( CONST_INT(int_of_string (lexeme lexbuf)) )
# 240 "SourceLexer.ml"

  | 6 ->
# 94 "SourceLexer.mll"
      ( BEGIN )
# 245 "SourceLexer.ml"

  | 7 ->
# 96 "SourceLexer.mll"
      ( END )
# 250 "SourceLexer.ml"

  | 8 ->
# 99 "SourceLexer.mll"
      ( LP )
# 255 "SourceLexer.ml"

  | 9 ->
# 101 "SourceLexer.mll"
      ( RP )
# 260 "SourceLexer.ml"

  | 10 ->
# 104 "SourceLexer.mll"
      ( LB )
# 265 "SourceLexer.ml"

  | 11 ->
# 106 "SourceLexer.mll"
      ( RB )
# 270 "SourceLexer.ml"

  | 12 ->
# 109 "SourceLexer.mll"
      ( SET )
# 275 "SourceLexer.ml"

  | 13 ->
# 112 "SourceLexer.mll"
      ( SEMI )
# 280 "SourceLexer.ml"

  | 14 ->
# 115 "SourceLexer.mll"
      ( COMMA )
# 285 "SourceLexer.ml"

  | 15 ->
# 118 "SourceLexer.mll"
      ( DOT )
# 290 "SourceLexer.ml"

  | 16 ->
# 121 "SourceLexer.mll"
      ( is_operator (lexeme lexbuf) )
# 295 "SourceLexer.ml"

  | 17 ->
# 124 "SourceLexer.mll"
      ( EOF )
# 300 "SourceLexer.ml"

  | 18 ->
# 127 "SourceLexer.mll"
      ( macro lexbuf )
# 305 "SourceLexer.ml"

  | 19 ->
# 130 "SourceLexer.mll"
      ( failwith ("Unknown character : " ^ (lexeme lexbuf) ^ " at " ^
		     (string_of_int lexbuf.lex_curr_p.pos_lnum) ^ ", " ^
		     (string_of_int (lexbuf.lex_curr_p.pos_cnum - lexbuf.lex_curr_p.pos_bol))) )
# 312 "SourceLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comm lexbuf =
   __ocaml_lex_comm_rec lexbuf 29
and __ocaml_lex_comm_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 136 "SourceLexer.mll"
 ( new_line lexbuf; token lexbuf )
# 324 "SourceLexer.ml"

  | 1 ->
# 138 "SourceLexer.mll"
 ( comm lexbuf )
# 329 "SourceLexer.ml"

  | 2 ->
# 140 "SourceLexer.mll"
 ( EOF )
# 334 "SourceLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comm_rec lexbuf __ocaml_lex_state

and comm_long lexbuf =
   __ocaml_lex_comm_long_rec lexbuf 33
and __ocaml_lex_comm_long_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 144 "SourceLexer.mll"
 ( token lexbuf )
# 346 "SourceLexer.ml"

  | 1 ->
# 146 "SourceLexer.mll"
 ( new_line lexbuf; comm_long lexbuf )
# 351 "SourceLexer.ml"

  | 2 ->
# 148 "SourceLexer.mll"
 ( comm_long lexbuf )
# 356 "SourceLexer.ml"

  | 3 ->
# 150 "SourceLexer.mll"
 ( failwith ("Commentaire non fermé") )
# 361 "SourceLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comm_long_rec lexbuf __ocaml_lex_state

and macro lexbuf =
   __ocaml_lex_macro_rec lexbuf 39
and __ocaml_lex_macro_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 154 "SourceLexer.mll"
 ( new_line lexbuf; token lexbuf )
# 373 "SourceLexer.ml"

  | 1 ->
# 156 "SourceLexer.mll"
 ( macro lexbuf )
# 378 "SourceLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_macro_rec lexbuf __ocaml_lex_state

;;

